{
  "active": false,
  "connections": {
    "Check State": {
      "main": [
        [
          {
            "node": "Command1 processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Command2 processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Command3 processing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Command check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Check": {
      "main": [
        [
          {
            "node": "Switch (Command Routing)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare IF Value",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command1 result": {
      "main": [
        [
          {
            "node": "Clear State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command2 result": {
      "main": [
        [
          {
            "node": "Clear State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command3 result": {
      "main": [
        [
          {
            "node": "Clear State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare IF Value": {
      "main": [
        [
          {
            "node": "Check State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Command Check",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Typing action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command1 processing": {
      "main": [
        [
          {
            "node": "Command1 result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command2 processing": {
      "main": [
        [
          {
            "node": "Command2 result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command3 processing": {
      "main": [
        [
          {
            "node": "Command3 result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set waitingForContent1": {
      "main": [
        [
          {
            "node": "Command1 content request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set waitingForContent2": {
      "main": [
        [
          {
            "node": "Command2 content request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set waitingForContent3": {
      "main": [
        [
          {
            "node": "Command3 content request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command2 content request": {
      "main": [
        []
      ]
    },
    "Switch (Command Routing)": {
      "main": [
        [
          {
            "node": "Set waitingForContent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set waitingForContent2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set waitingForContent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-13T04:03:46.521Z",
  "id": "zfVTV8lix5BeB6SI",
  "meta": {
    "templateId": "3055"
  },
  "name": "Telegram Bot with Menu-Driven Commands",
  "nodes": [
    {
      "id": "b45285b7-5d2e-4f87-b796-b4db51416dcb",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        480,
        1020
      ],
      "webhookId": "30a3f361-4607-40f0-bc7e-d1fb385430d2",
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "bcdab8f6-7844-45b9-a4b1-6c7b4e7db34e",
      "name": "Switch (Command Routing)",
      "type": "n8n-nodes-base.switch",
      "position": [
        900,
        980
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "1",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/command1"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "2",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "d09b6282-e9f8-4e43-b3db-9edae88cd634",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/command2"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "3",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "89a078b3-c2f3-47ff-9136-5de7bd05fb98",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "/command3"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "typeVersion": 3.2
    },
    {
      "id": "f355edc9-07f7-409f-9f03-6d2895b49a53",
      "name": "Temp to Initiate Static Data",
      "type": "n8n-nodes-base.code",
      "notes": "You only need to run the initialization step once per workflow, regardless of the number of Telegram chat IDs. The initialization creates the telegramStates object within the global static data of the workflow. Once that object exists, the workflow will use it to store the state for any chat ID.",
      "position": [
        480,
        520
      ],
      "parameters": {
        "jsCode": "let workflowStaticData = $getWorkflowStaticData('global');\nif (!workflowStaticData.telegramStates) {\n    workflowStaticData.telegramStates = {}; // Create the nested object\n}\nreturn workflowStaticData;"
      },
      "notesInFlow": false,
      "typeVersion": 2
    },
    {
      "id": "c99b639e-d184-481d-9871-7dd4416836d2",
      "name": "Check State",
      "type": "n8n-nodes-base.switch",
      "position": [
        920,
        1700
      ],
      "parameters": {
        "rules": {
          "values": [
            {
              "outputKey": "1",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.state }}",
                    "rightValue": "waitingForContent1"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "2",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "1a145782-de66-496c-aa5e-5fa5b93614f9",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.state }}",
                    "rightValue": "waitingForContent2"
                  }
                ]
              },
              "renameOutput": true
            },
            {
              "outputKey": "3",
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "e83e025f-2758-4baa-a868-bdc0f2bd7ac2",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.state }}",
                    "rightValue": "waitingForContent3"
                  }
                ]
              },
              "renameOutput": true
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "typeVersion": 3.2
    },
    {
      "id": "a9d01dd0-0927-4c58-9866-1230af22e965",
      "name": "Clear State",
      "type": "n8n-nodes-base.code",
      "position": [
        1860,
        1580
      ],
      "parameters": {
        "jsCode": "let workflowStaticData = $getWorkflowStaticData('global');\nif (workflowStaticData.telegramStates) {\n    delete workflowStaticData.telegramStates[$('Telegram Trigger').first().json.message.chat.id.toString()];\n}\nreturn $input.all();"
      },
      "typeVersion": 2
    },
    {
      "id": "6389f680-fa93-4e8f-95ff-0e21f11af087",
      "name": "Set waitingForContent1",
      "type": "n8n-nodes-base.code",
      "position": [
        1180,
        480
      ],
      "parameters": {
        "jsCode": "let workflowStaticData = $getWorkflowStaticData('global');\nif (!workflowStaticData.telegramStates) {\n    workflowStaticData.telegramStates = {};\n}\nworkflowStaticData.telegramStates[$json.message.chat.id.toString()] = { waitingForContent1: true };\nreturn $input.all();"
      },
      "typeVersion": 2
    },
    {
      "id": "549abb7a-c688-4cc1-91e1-cb34d13b9700",
      "name": "Set waitingForContent2",
      "type": "n8n-nodes-base.code",
      "position": [
        1180,
        700
      ],
      "parameters": {
        "jsCode": "let workflowStaticData = $getWorkflowStaticData('global');\nif (!workflowStaticData.telegramStates) {\n    workflowStaticData.telegramStates = {};\n}\nworkflowStaticData.telegramStates[$json.message.chat.id.toString()] = { waitingForContent2: true };\nreturn $input.all();"
      },
      "typeVersion": 2
    },
    {
      "id": "d2f98541-2150-4472-8ae8-f698257a8258",
      "name": "Prepare IF Value",
      "type": "n8n-nodes-base.code",
      "position": [
        760,
        1720
      ],
      "parameters": {
        "jsCode": "let globalData = $getWorkflowStaticData('global');\nlet state = \"none\"; // Default state\n\nif (globalData && globalData.telegramStates) {\n    let chatData = globalData.telegramStates[$json.message.chat.id.toString()];\n    if (chatData) {\n        if (chatData.waitingForContent1 === true) {\n            state = \"waitingForContent1\";\n        } else if (chatData.waitingForContent2 === true) {\n            state = \"waitingForContent2\";\n        } else if (chatData.waitingForContent3 === true) {\n            state = \"waitingForContent3\";\n        }\n    }\n}\nreturn { state };"
      },
      "typeVersion": 2
    },
    {
      "id": "ae7a40ca-55eb-478d-8bde-c23cfdf3d85e",
      "name": "Command Check",
      "type": "n8n-nodes-base.if",
      "position": [
        700,
        1020
      ],
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json['message']['text']}}",
              "value2": "/command",
              "operation": "startsWith"
            }
          ]
        },
        "combineOperation": "any"
      },
      "typeVersion": 1
    },
    {
      "id": "aa197f22-5a55-4883-a852-bed4f0919baa",
      "name": "Set waitingForContent3",
      "type": "n8n-nodes-base.code",
      "position": [
        1180,
        920
      ],
      "parameters": {
        "jsCode": "let workflowStaticData = $getWorkflowStaticData('global');\nif (!workflowStaticData.telegramStates) {\n    workflowStaticData.telegramStates = {};\n}\nworkflowStaticData.telegramStates[$json.message.chat.id.toString()] = { waitingForContent3: true };\nreturn $input.all();"
      },
      "typeVersion": 2
    },
    {
      "id": "7c5803ba-f704-4664-983e-6534742d9c4a",
      "name": "Send Typing action",
      "type": "n8n-nodes-base.telegram",
      "position": [
        700,
        760
      ],
      "webhookId": "425443f1-117e-4aaa-84d5-74ce2a1a1b64",
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "operation": "sendChatAction"
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1.2
    },
    {
      "id": "7c32f9b4-b9ae-48e3-aede-c8c304167c43",
      "name": "Command1 content request",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1440,
        480
      ],
      "webhookId": "e6222973-c851-4ee3-88e7-114eb59193e6",
      "parameters": {
        "text": "Please enter the content for command1:",
        "chatId": "={{$json.message.chat.id}}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "b09fdfed-e95c-4e0e-ae34-cbecf552585c",
      "name": "Command2 content request",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1440,
        700
      ],
      "webhookId": "4b6373cf-99db-4fd9-8665-bc8dbba64c32",
      "parameters": {
        "text": "Please enter the content for command2:",
        "chatId": "={{$json['message']['chat']['id']}}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "d402d0e1-2afb-4c10-95af-4db1058e6036",
      "name": "Command3 content request",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1440,
        920
      ],
      "webhookId": "8e2fb397-4b82-4a5d-a358-32ed6c18ac22",
      "parameters": {
        "text": "Please enter the content for command2:",
        "chatId": "={{$json['message']['chat']['id']}}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "ffac12bc-ec49-474d-ac4b-6a401433cad3",
      "name": "No Command check",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1180,
        2100
      ],
      "webhookId": "2814cc4c-0392-43f4-bbb4-fd096e61ac13",
      "parameters": {
        "text": "Please choose a command from the menu.",
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "81dd8b62-e5fb-487e-86dd-f69a72dd261c",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1100,
        1220
      ],
      "parameters": {
        "color": 4,
        "width": 573,
        "height": 829,
        "content": "## Command processing"
      },
      "typeVersion": 1
    },
    {
      "id": "3ec1c4cc-c9e0-4c4e-b56c-e733bc853270",
      "name": "Command1 result",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1460,
        1320
      ],
      "webhookId": "05e84345-6d19-42cf-bc8c-afdfd87339f1",
      "parameters": {
        "text": "=This is the generated result for command1: {{ $json.text }}",
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "1b9114f0-e7ee-43fa-ba9d-536429f926e2",
      "name": "Command2 result",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1460,
        1580
      ],
      "webhookId": "55ee4a03-2d14-4caa-94f8-b11db34ddabd",
      "parameters": {
        "text": "=This is the generated result for command2: {{ $json.text }}",
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "f5c30793-59fc-4070-91cb-5ca20aeb2431",
      "name": "Command3 result",
      "type": "n8n-nodes-base.telegram",
      "position": [
        1460,
        1840
      ],
      "webhookId": "55ee4a03-2d14-4caa-94f8-b11db34ddabd",
      "parameters": {
        "text": "=This is the generated result for command3: {{ $json.text }}",
        "chatId": "={{ $('Telegram Trigger').first().json.message.chat.id }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "2w1ddXaYOgblbCbu",
          "name": "Telegram account"
        }
      },
      "typeVersion": 1
    },
    {
      "id": "c8bab9d3-f159-44a1-868b-d194e4c05c7e",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        240
      ],
      "parameters": {
        "color": 7,
        "width": 313,
        "height": 469,
        "content": "## Initialization of global static data\nYou only need to run the initialization step once per workflow, regardless of the number of Telegram chat IDs. The initialization creates the telegramStates object within the global static data of the workflow. Once that object exists, the workflow will use it to store the state for any chat ID."
      },
      "typeVersion": 1
    },
    {
      "id": "2e3ee128-2c7c-4662-bf2e-6ba518743feb",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1100,
        380
      ],
      "parameters": {
        "color": 2,
        "width": 573,
        "height": 789,
        "content": "## Command content requesting"
      },
      "typeVersion": 1
    },
    {
      "id": "bef8cc55-9f19-47d2-826b-41512c90964e",
      "name": "Command1 processing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1180,
        1320
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "9b766ceb-dfd1-47b5-a9f8-148fbd79d1d2",
      "name": "Command2 processing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1180,
        1580
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "40902676-eb28-46a7-bad4-c11075979c5d",
      "name": "Command3 processing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1180,
        1840
      ],
      "parameters": {},
      "typeVersion": 1
    },
    {
      "id": "42462e2d-8536-4509-a2aa-851f40ae6c1e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1100,
        2300
      ],
      "parameters": {
        "color": 7,
        "width": 573,
        "height": 309,
        "content": "## Adding More Commands\nThe template is designed to be easily extended. To add more commands:\n\n1.  Add a new output to the \"Switch (Command Routing)\" node for your new command (e.g., /command4).\n2.  Duplicate one of the \"Set waitingForContentX\" and \"CommandX content request\" node pairs. Rename the \"Set\" node to reflect the new command number (e.g., \"Set waitingForContent4\") and update the variable name within the code accordingly. Also rename the request node (e.g. Command4 content request)\n3.  Add a corresponding output to the \"Check State\" node.\n4.  Create a new processing branch for your new command, connecting it to the appropriate output of the \"Check State\" node, and the entry of the \"Clear State\" node."
      },
      "typeVersion": 1
    }
  ],
  "pinData": null,
  "settings": null,
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-13T04:03:59.000Z",
  "versionId": "610bf287-3b2a-41e7-9326-75610624b7a3"
}